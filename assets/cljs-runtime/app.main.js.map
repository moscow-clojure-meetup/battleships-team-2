{"version":3,"sources":["app/main.cljs"],"mappings":"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","names":["app.main/gen-table","n","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","iter__4523__auto__","s__42123","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__42125","cljs.core/chunk-buffer","i__42124","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42122","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","x","cljs.core.range.cljs$core$IFn$_invoke$arity$1","s__42127","b__42129","i__42128","iter__42126","s__42131","b__42133","i__42132","iter__42130","y","app.main/ai-shot","cljs.core/rand-int","js/app","js/app.main","js/app.main.state","app.main/state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","vec__42134","vec__42137","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/deref","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","p__42140","vec__42141","app.main/shot","app.main/on-cell-click","coord","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","js/alert","app.main/render-table","table","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","row","cell","app.main/main!","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document","cljs.core/chunk-first"],"sourcesContent":["(ns app.main\n  (:require [app.lib :as lib]\n            [reagent.core :as r]))\n\n(defn gen-table [n]\n  (apply vector\n         (for [x (range n)]\n           (apply vector\n                  (for [y (range n)]\n                    {:class \"cell\"})))))\n\n(defn ai-shot []\n  [(rand-int 8)\n   (rand-int 8)])\n\n;; {:class STR}\n(defonce state (r/atom {:table (gen-table 8)\n                        :counter 0\n                        :my-ships [(ai-shot)]\n                        :comp-ships [(ai-shot)]}))\n\n(let [[[x y]] (:my-ships @state)]\n  (swap! state assoc-in [:table x y :class] \"ship\"))\n\n(defn shot [[x y]]\n  (swap! state assoc-in [:table x y :class] \"beaten\"))\n\n(defn on-cell-click [x y]\n  ;; (js/alert (str \"I'm \" x \" \" y))\n  (swap! state assoc-in [:table x y :class] \"beaten\")\n  (let [coord (ai-shot)]\n    (if (= coord (nth (:my-ships @state) 0))\n      (do (js/alert \"you lose\")\n          (swap! state assoc-in [:table x y :class] \"player-died\"))\n      (if (= [x y] (nth (:comp-ships @state) 0))\n        (do (js/alert \"you win\")\n            (swap! state assoc-in [:table x y :class] \"enemy-died\"))\n        (shot coord)))))\n\n(defn render-table []\n  (let [table (:table @state)]\n    [:div {:class \"grid\"}\n    (map-indexed (fn [x row]\n           [:div {:class \"row\" :key [x]}       \n            (map-indexed (fn [y cell]\n                   [:div {:class (:class cell)\n                          :key [x y]\n                          :on-click #(on-cell-click x y)}]) row)])\n                 table)]))\n\n(defn main! []\n  (r/render [render-table]\n            (.getElementById js/document \"app\")))\n\n;; (defn reload! []\n;;   (println \"[main] reloaded lib:\" lib/c lib/d)\n;;   (println \"[main] reloaded:\" a b))\n\n(comment (js/alert \"hi\")\n         (gen-table)\n         (reset! state {:table [[{:class \"cell\"} {:class \"cell\"}]\n                                [{:class \"cell\"} {:class \"cell\"}]]\n                        :counter 3})\n         (reset! state {:table (gen-table 8)\n                        :counter 3})\n         (render-table))\n"]}